1 no answer
============

#include<stdio.h>
int main() {
    int fragment[20],b[20],p[20],i,j,nb,np,temp,lowest=9999;
    static int barray[20],parray[20];
    printf("\n\t\t\tMemory Management Scheme - Best Fit");
    printf("\nEnter the number of blocks:");
    scanf("%d",&nb);
    printf("Enter the number of processes:");
    scanf("%d",&np);
    printf("\nEnter the size of the blocks:-\n");
    for(i=1; i<=nb; i++) {
        printf("Block no-%d:",i);
        scanf("%d",&b[i]);
    }
    printf("\nEnter the size of the processes :-\n");
    for(i=1; i<=np; i++) {
        printf("Process no-%d:",i);
        scanf("%d",&p[i]);
    }
    for(i=1; i<=np; i++) {
        for(j=1; j<=nb; j++) {
            if(barray[j]!=1) {
                temp=b[j]-p[i];
                if(temp>=0)if(lowest>temp) {
                        parray[i]=j;
                        lowest=temp;
                    }
            }
        }
        fragment[i]=lowest;
        barray[parray[i]]=1;
        lowest=10000;
    }
    printf("\nProcess_no\tProcess_size\tBlock_no\tBlock_size\tFragment");
    for(i=1; i<=np && parray[i]!=0; i++)
        printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d",i,p[i],parray[i],b[parray[i]],fragment[i]);
}
// Input: 
//  4
//  3
//  200
//  120
//  220
//  30
//  15
//  78
//  99
 


2 no answer
============


#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <ctype.h>
 
#include <algorithm>
#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <string>
#include <sstream>
#include <queue>
#include <list>
#include <string>
 
using namespace std;
 
#define ll long long
#define smallestnum 1e18
 
 
int main() {
    int alloc[10][10];
    int request[10][10],avail[10],r[10],w[10];
    static int mark[20];
    int i,j,np,nr;
    // open the input file and read the content of
    // this program expects that all the input is stored in defined manner
    // inside input.txt file
    FILE* file = fopen ("in.txt", "r");
    // read all the conetents
    fscanf (file, "%d", &np);
    fscanf (file, "%d", &nr);
    for(i=0; i<nr; i++) {
        fscanf (file, "%d", &r[i]);
    }
    // read the allocation matrix
    for(i=0; i<np; i++)
        for(j=0; j<nr; j++)
            fscanf (file, "%d", &alloc[i][j]);
    // read the request matrix
    for(i=0; i<np; i++) for(j=0; j<nr; j++)
            fscanf (file, "%d", &request[i][j]);
    // solution starts here
    printf("\n");
    //marking processes with zero allocation
    for(i=0; i<np; i++) {
        int count=0;
        for(j=0; j<nr; j++)      {
            if(alloc[i][j]==0)
                count++;
            else
                break;
        }
        if(count==nr)
            mark[i]=1;
    }
    for(j=0; j<nr; j++)
        w[j]=avail[j];
 
 
 
    //mark processes with request less than or equal to W
    for(i=0; i<np; i++) {
        int canbeprocessed=0;
        if(mark[i]!=1) {
            for(j=0; j<nr; j++) {
                if(request[i][j]<=w[j])
                    canbeprocessed=1;
                else {
                    canbeprocessed=0;
                    break;
                }
            }
            if(canbeprocessed) {
                mark[i]=1;
                for(j=0; j<nr; j++) w[j]+=alloc[i][j];
            }
        }
    }
 
    printf("printing the contents read from file: \n");
    printf("\n\nNumer of processes: %d",np);
 
    printf("\n\nNumer of resources: %d",nr);
    printf("\n\nAvailbaility vector\n");
 
    for(i=0; i<nr; i++) {
        printf("%d ",r[i]);
    }
    printf("\n");
 
    printf("\nAllocation Matrix\n");
    for(i=0; i<np; i++) {
        for(j=0; j<nr; j++)
            printf("%d ", alloc[i][j]);
        printf("\n");
    }
 
    printf("\n");
    printf("\nRequest Matrix\n");
 
    for(i=0; i<np; i++) {
        for(j=0; j<nr; j++)
            printf("%d ", request[i][j]);
        printf("\n");
    }
    //checking for unmarked processes
    int deadlock=0;
    for(i=0; i<np; i++)
        if(mark[i]!=1)
            deadlock=1;
    if(deadlock)
        printf("\nThere exist a Deadlock\n\n");
    else printf("\nThere does not exists no Deadlock\n\n");
    fclose (file);
}





3 no ans
==========

#include <bits/stc++.h>
 
using namespace std;
 
#define ll long long
#define smallestnum 1e18
 
 
int findLRU(int time[], int n) {
    int i, minimum = time[0], pos = 0;
    for(i = 1; i < n; ++i) {
        if(time[i] < minimum) {
            minimum = time[i];
            pos = i;
        }
    }
    return pos;
}
 
 
int main() {
    int no_of_frames, no_of_pages, frames[10], pages[30], counter = 0, time[1], i, j, flag1, flag2;
    int faults= 0;
    printf("Enter number of frames: ");
    scanf("%d", &no_of_frames);
    printf("Enter number of pages: ");
    scanf("%d", &no_of_pages);
    //printf("Enter reference string: ");
    for(i = 0; i < no_of_pages; ++i) {
        //scanf("%d", &pages[i]);
        pages[i] = rand() % 10;  // get input automatically with a random string
 
    }
    cout << endl;
    for(i = 0; i < no_of_frames; ++i) {
        frames[i] = -1;
    }
    for(i = 0; i < no_of_pages; ++i) {
        flag1 = flag2 = 0;
        for(j = 0; j < no_of_frames; ++j) {
            if(frames[j] == pages[i]) {
                counter++;
                time[j] = counter;
                flag1 = flag2 = 1;
                break;
            }
        }
        if(flag1 == 0) {
            for(j = 0; j < no_of_frames; ++j) {
                if(frames[j] == -1) {
                    counter++;
                    faults++;
                    frames[j] = pages[i];
                    time[j] = counter;
                    flag2 = 1;
                    break;
                }
            }
        }
        if(flag2 == 0) {
            int pos = findLRU(time, no_of_frames);
            counter++;
            faults++;
            frames[pos] = pages[i];
            time[pos] = counter;
        }
        printf("\n");
        for(j = 0; j < no_of_frames; ++j) {
            printf("%d\t", frames[j]);
        }
    }
    printf("\n\nTotal Page Faults = %d", faults);
    return 0;
}
// input: 3 10